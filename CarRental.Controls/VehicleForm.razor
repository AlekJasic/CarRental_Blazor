@using CarRental.Model;
@using Microsoft.AspNetCore.Components.Forms;

<h1>@Mode Vehicle</h1>
<hr />
@if (Vehicle != null)
{
<EditForm Model="@Vehicle" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
          OnValidSubmit="(async () => await HandleSubmitAsync(true))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="vehicle-summary-fields">
        <label>
            License number:
            <InputText class="vehicle-summary-fields" @bind-Value="Vehicle.LicenseNumber" />
            <ConcurrencyField Model="@Vehicle" DbModel="@DbVehicle" Property="obj => obj?.LicenseNumber" />
        </label>
    </div>
    <div class="vehicle-summary-fields">
        <label>
            Brand:
            <InputText class="vehicle-summary-fields" @bind-Value="Vehicle.Brand" />
            <ConcurrencyField Model="@Vehicle" DbModel="@DbVehicle" Property="obj => obj?.Brand" />
        </label>
     </div>
     <div class="vehicle-summary-fields">
        <label>
            Model:
            <InputText class="vehicle-summary-fields" @bind-Value="Vehicle.Model" />
            <ConcurrencyField Model="@Vehicle" DbModel="@DbVehicle" Property="obj => obj?.Model" />
        </label>
      </div>
     <div class="vehicle-summary-fields">
         <label>
             Registration date:
             <InputText class="vehicle-summary-fields" @bind-Value="Vehicle.RegistrationDate" disabled ="@disabled" />
             <ConcurrencyField Model="@Vehicle" DbModel="@DbVehicle" Property="obj => obj?.RegistrationDate" />
         </label>
      </div>
     <div class="vehicle-summary-fields">
         <label>
             Mileage:
             <InputText class="vehicle-summary-fields" @bind-Value="Vehicle.Mileage" />
             <ConcurrencyField Model="@Vehicle" DbModel="@DbVehicle" Property="obj => obj?.Mileage" />
         </label>
      </div>
            
         <br />
        <div style="align-items:baseline">
            <button disabled="@Busy" class="button-primary button-primary-bg-light" @onclick="@(async () => await CancelAsync())">Cancel</button>&nbsp;
            <button disabled="@Busy" type="submit" class="button-primary button-primary-bg-light">Submit</button>
        </div>
</EditForm>
}
@code {
    /// <summary>
    /// Let parent handle result of validation.
    /// </summary>
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    /// <summary>
    /// Let parent handle what to do on cancel.
    /// </summary>
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    /// <summary>
    /// <c>True</c> if add mode.
    /// </summary>
    [Parameter]
    public bool IsAdd { get; set; }

    /// <summary>
    /// The <see cref="Vehicle"/> to upsert.
    /// </summary>
    [Parameter]
    public Vehicle Vehicle { get; set; }

    /// <summary>
    /// The database version of <see cref="Vehicle"/> if a concurrency issue
    /// exists.
    /// </summary>
    [Parameter]
    public Vehicle DbVehicle { get; set; }

    /// <summary>
    /// Prevent multiple asynchronous operations at the same time.
    /// </summary>
    [Parameter]
    public bool Busy { get; set; }

    /// <summary>
    /// Mode.
    /// </summary>
    public string Mode => IsAdd ? "Add" : "Edit";
    private bool disabled => Mode == "Edit";

    /// <summary>
    /// Ask to cancel.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
        public async Task CancelAsync()
    {
        await CancelRequest.InvokeAsync(null);
    }

    /// <summary>
    /// Handle form submission request.
    /// </summary>
    /// <param name="isValid"><c>True</c> when field validation passed.</param>
    /// <returns>A <see cref="Task"/>.</returns>
    public async Task HandleSubmitAsync(bool isValid)
    {
        await ValidationResult.InvokeAsync(isValid);
    }
}