@implements IDisposable

@using CarRental.BaseRepository;
@using CarRental.Model;
@using System.Security.Claims;

@inject ClaimsPrincipal User
@inject NavigationManager Nav
@inject IPageHelper PageHelper
@inject EditService EditService

@if (!Busy && Vehicle == null)
{
    <div class="alert alert-warning">Could not find vehicle with id <span>@VehicleId</span>.</div>
}
else
{
    <VehicleForm Busy="@Busy" Vehicle="@Vehicle" DbVehicle="@DbVehicle" IsAdd="false"
                   CancelRequest="Cancel"
                   ValidationResult="@(async (success) => await ValidationResultAsync(success))" />
}
@if (ConcurrencyError)
{
    <br />
    <div class="alert alert-danger">
        <p>
            The vehicle details have changed since it was last loaded. The updated fields are highlighted in the form.
            Please choose an option:
        </p>
        <p><b>Cancel</b> to lose your changes and keep the database version</p>
        <p><b>Submit</b> to force an update with your version</p>
    </div>
}
@if (Error)
{
    <br />
    <div class="alert alert-danger">Failed to update the vehicle (@ErrorMessage).</div>
}

@code {

    /// <summary>
    /// Id of <see cref="Vehicle"/> to edit.
    /// </summary>
    [Parameter]
    public int VehicleId { get; set; }

    /// <summary>
    /// The <see cref="IUnitOfWork{Vehicle}"/> to service requests.
    /// </summary>
    [Parameter]
    public IUnitOfWork<Vehicle> Service { get; set; }

    /// <summary>
    /// <see cref="Vehicle"/> being edited.
    /// </summary>
    public Vehicle Vehicle { get; set; }

    /// <summary>
    /// Database version of <see cref="Vehicle"/> when concurrency issues exist.
    /// </summary>
    public Vehicle DbVehicle { get; set; }

    /// <summary>
    /// Avoid concurrent requests.
    /// </summary>
    public bool Busy;

    /// <summary>
    /// An error occurred in the update.
    /// </summary>
    public bool Error;

    /// <summary>
    /// A concurrency error needs resolution.
    /// </summary>
    public bool ConcurrencyError;

    /// <summary>
    /// Error message.
    /// </summary>
    public string ErrorMessage = string.Empty;

    /// <summary>
    /// Start it up.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    protected override async Task OnParametersSetAsync()
    {
        Vehicle = await Service.Repo.LoadAsync(VehicleId, null, true);
        Busy = false; // end async

        await base.OnInitializedAsync();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Busy = true;
        await base.SetParametersAsync(parameters);
    }

    /// <summary>
    /// Result of form validation.
    /// </summary>
    /// <param name="success"><c>True</c> when model is valid.</param>
    /// <returns>A <see cref="Task"/>.</returns>
    public async Task ValidationResultAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            // still need to edit model
            Error = false;
            ConcurrencyError = false;
            return;
        }

        Busy = true; // async
        try
        {
            await Service.CommitAsync();
            EditService.Success = true;
            // go to view to see the record
            Nav.NavigateTo("");
        }
        catch (RepoConcurrencyException<Vehicle> dbex)
        {
            // concurrency issues!
            ConcurrencyError = true;

            if (dbex.DbEntity == null)
            {
                // deleted - show vehicle not found
                Nav.NavigateTo($"/view/{Vehicle.Id}");
                return;
            }

            // bind to show labels on form
            DbVehicle = dbex.DbEntity;

            Error = false;
            Busy = false;
        }
        catch (Exception ex)
        {
            // unknown exception
            Error = true;
            ErrorMessage = ex.Message;
            Busy = false;
        }
    }

    /// <summary>
    /// Bail out!
    /// </summary>
    public void Cancel()
    {
        Busy = true;
        Nav.NavigateTo($"/{PageHelper.Page}");
    }

    /// <summary>
    /// Dispose and properly unregister the handler.
    /// </summary>
    /// <param name="disposing"><c>True</c> when disposing.</param>
    public void Dispose()
    {
        if (Service != null)
        {
            Service.Dispose();
            Service = null;
        }
    }
}
